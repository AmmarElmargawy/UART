`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 07/17/2023 07:15:01 PM
// Design Name: 
// Module Name: UART_TX
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module UART_TX
 #(parameter Dbit = 8 , // data bits 
            sb_tick = 16 // stop bit tick
 )
(
   input [Dbit -1 : 0 ] tx_din , 
   input tx_start ,
   input s_tick ,
   input clk , reset_n ,
   output  tx_out ,
   output reg tx_done 
    );
    
    
    reg [1:0] state_reg , state_next ;
    reg [3:0] s_reg , s_next ; // counter to keep trick the boud rate
    reg  [$clog2(Dbit) - 1 : 0] n_reg , n_next ; // counter to keep trick the data recieved
    reg [Dbit -1 :0] f_reg , f_next ; // store the recieved data bit "the frame" 
    reg tx_reg , tx_next ; // to track the transimited bit
    
     localparam idle = 2'b00 ;
     localparam start = 2'b01 ;
     localparam data = 2'b10 ;
     localparam stop = 2'b11 ;
     
      //  state logic
        always @(posedge clk , negedge reset_n)
         begin 
          if (~reset_n)
             begin 
              state_reg <= idle ;
              s_reg <= 0 ;
              n_reg <= 0 ;
              f_reg <= 0 ;
              tx_reg <= 1'b1 ; 
             end 
        else
            begin 
              state_reg <= state_next ;
              s_reg <= s_next ;
              n_reg <= n_next ;
              f_reg <= f_next ;
              tx_reg <= tx_next ;
            end             
         end 
         
        // next state logic 
        always@(*)
         begin 
          // defualt values 
           state_next = state_reg ;
           s_next = s_reg ;
           n_next = n_reg ;
           f_next = f_reg ;
           tx_done = 1'b0 ;
           
            case (state_reg)
             idle: 
              begin
                  tx_next = 1'b1 ;
                    if(tx_start) 
                    begin
                       s_next = 0 ;
                       f_next = tx_din ;
                       state_next = start ;
                    end 
               end      
             start: 
              begin
                 tx_next = 1'b0 ;
                   if (s_tick)
                      if(s_reg == (Dbit  - 1)) // 
                       begin 
                        s_next = 0 ;
                        n_next = 0 ; 
                        state_next = data ;
                       end
                   else 
                     s_next = s_reg + 1 ;  
              end        
             data:
              begin 
                 tx_next = f_reg[0] ;
                   if(s_tick) 
                      if (s_reg == (Dbit - 1) )
                      begin 
                        s_next = 0 ;
                        f_next = { 1'b0 , f_reg[Dbit - 1:1]}; 
                          if(n_reg == (Dbit -1)) //
                            state_next = stop ;
                            else 
                            n_reg = n_reg + 1 ; 
                      end
                       else 
                          s_next = s_reg + 1 ;
                end          
             stop:  
                begin
                 tx_next = 1'b1 ;
                   if(s_tick) 
                     if(s_reg == (sb_tick - 1 ) ) 
                      begin 
                       tx_done = 1'b1 ;
                       state_next = idle ;
                      end 
                   else 
                    s_next = s_reg +1 ;   
                 end   
             default: 
                 state_next = idle ;
            endcase
         end 
        
       // output logic  
        assign tx_out = tx_reg ;
endmodule
